{"version":3,"file":"static/js/144.934bf1c9.chunk.js","mappings":"wOAIaA,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EACvBC,EACAC,EACAC,EACAC,GAAM,IAAAC,EAAAC,EAAAC,UAAA,OAAAT,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAENN,EAAOC,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,CAAC,EAEE,WAHTA,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAG,SAILQ,EAAcb,EAAOC,EAAYE,EAAQD,GAChCY,SAASb,KAAgBa,SAASV,EAAQH,aACnDC,GAASa,EAAAA,EAAAA,IAAUX,IACpB,wBAAAI,EAAAQ,OAAA,GAAAjB,EAAA,KACF,gBAbqBkB,EAAAC,EAAAC,EAAAC,GAAA,OAAAzB,EAAA0B,MAAA,KAAAf,UAAA,KAoETO,EAAgB,SAACb,EAAOC,EAAYE,EAAQD,GACvDoB,MAAM,GAADC,OAAIC,EAAAA,EAAM,YAAY,CACzBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADJ,OAAYvB,IAE3B4B,KAAMC,KAAKC,UAAU,CACnB3B,OAAAA,EACAF,WAAAA,MAGD8B,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACC,GACc,MAAfA,EAAIE,QACNhC,GAASiC,EAAAA,EAAAA,IAAUH,EAAII,MAE3B,IACCC,OAAM,WAAO,GAClB,C,8ICoBA,EAzGiB,SAAH1C,GAAuB,IAAjB2C,EAAS3C,EAAT2C,UACZC,GAAWC,EAAAA,EAAAA,OACJC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACzD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAACC,MAAO,CAAEC,MAAO,QAASH,SAAA,EACjCF,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,OAAe,CAACG,QAAQ,cAAcC,UAAU,WAAUL,SAAA,EACzDM,EAAAA,EAAAA,KAACC,EAAAA,EAAU,IAAG,SAAO,QAEvBT,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAa,CAACG,QAAQ,OAAMJ,SAAA,EAC3BM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,SACX,EAAEQ,SACH,cAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,QACX,EAAEQ,SACH,qBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,qBACX,EAAEQ,SACH,0BAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,WACX,EAAEQ,SACH,gBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,QACX,EAAEQ,SACH,aAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,QACTD,GAAU,EACZ,EAAES,SACH,iBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,uBACTD,GAAU,EACZ,EAAES,SACH,0BAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,QACTD,GAAU,EACZ,EAAES,SACH,8BAMPM,EAAAA,EAAAA,KAAA,WAGN,E,UC/BA,EAxEmB,SAAH1D,GAAuB,IAAjB2C,EAAS3C,EAAT2C,UACdC,GAAWC,EAAAA,EAAAA,OACJC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACzD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAACC,MAAO,CAAEC,MAAO,QAASH,SAAA,EACjCF,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,OAAe,CAACI,UAAU,WAAWD,QAAQ,cAAaJ,SAAA,EACzDM,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,IAAG,eAEdX,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAa,CAACG,QAAQ,OAAMJ,SAAA,EAC3BM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,WACX,EAAEQ,SACH,gBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,WACX,EAAEQ,SACH,gBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,aACX,EAAEQ,SACH,kBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,cACX,EAAEQ,SACH,0BAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,WACX,EAAEQ,SACH,eAGc,WAGrBM,EAAAA,EAAAA,KAAA,WAGN,E,sECTA,EA7DoB,SAAH1D,GAAuB,IAAjB2C,EAAS3C,EAAT2C,UACfC,GAAWC,EAAAA,EAAAA,OACJC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACzD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAACC,MAAO,CAAEC,MAAO,QAASH,SAAA,EACjCF,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,OAAe,CAACI,UAAU,WAAWD,QAAQ,cAAaJ,SAAA,EACzDM,EAAAA,EAAAA,KAACI,EAAAA,EAAU,IAAG,gBAEhBZ,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAa,CAACG,QAAQ,OAAMJ,SAAA,EAC3BM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,sBACX,EAAEQ,SACH,2BAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,oBACX,EAAEQ,SACH,yBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,mBACX,EAAEQ,SACH,uBAGc,KACjBM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPjB,GAAU,GACVC,EAAS,MACX,EAAEQ,SACH,oBAGc,WAGrBM,EAAAA,EAAAA,KAAA,WAGN,E,UCZA,EA/CiB,WACf,IAAMd,GAAWC,EAAAA,EAAAA,OACJC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACzD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAACC,MAAO,CAAEC,MAAO,QAASH,SAAA,EACjCF,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,OAAe,CAACI,UAAU,WAAWD,QAAQ,cAAaJ,SAAA,EACzDM,EAAAA,EAAAA,KAACK,EAAAA,EAAI,IAAG,aAEVb,EAAAA,EAAAA,MAACG,EAAAA,EAAAA,KAAa,CAACG,QAAQ,OAAMJ,SAAA,EAC3BM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,mBACX,EAAEQ,SACH,wBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,cACX,EAAEQ,SACH,mBAIHM,EAAAA,EAAAA,KAACL,EAAAA,EAAAA,KAAa,CAAAD,UACZM,EAAAA,EAAAA,KAAA,KACED,UAAU,WACVG,QAAS,WACPhB,EAAS,gBACX,EAAEQ,SACH,oBAGc,WAGrBM,EAAAA,EAAAA,KAAA,WAGN,E,UCfA,EA/BkB,SAAH1D,GAAuB,IAAjB2C,EAAS3C,EAAT2C,UACbqB,GAAalB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMkB,KAAKC,UAAU,IACzDC,GAAWtB,EAAAA,EAAAA,MACjB,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEM,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVwB,EAAS,4BAADvC,OAA6BoC,EAAWI,QAClD,EAAEhB,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,yBAAwBL,SAAA,EACxCM,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,IAAG,kBAGhBH,EAAAA,EAAAA,KAAA,SAAO,KACPA,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVwB,EAAS,2BAADvC,OAA4BoC,EAAWI,QACjD,EAAEhB,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,yBAAwBL,SAAA,EACxCM,EAAAA,EAAAA,KAACW,EAAAA,EAAI,IAAG,wBAGZX,EAAAA,EAAAA,KAAA,WAGN,E,kDC/BaY,EAASC,EAAAA,GAAAA,QAAW1C,EAAAA,GAEpB2C,EAAiB,SAACC,GAC7BH,EAAOI,KAAK,WAAYD,EAC1B,E,iNCqQA,EAnPuB,WAErB,IAAMlE,GAAWoE,EAAAA,EAAAA,MAEXC,GAAO9B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM8B,KAAKC,IAAI,IAC7CtE,GAASsC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMvC,OAAOA,MAAM,IACnDwD,GAAalB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMkB,KAAKC,UAAU,KAElDpB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,KAEzD8B,EAAAA,EAAAA,YAAU,WACRT,EAAOU,GAAG,UAAS,eAAAhF,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAO6E,GAAO,OAAA/E,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACjCmE,EAAcD,GAAS,wBAAApE,EAAAQ,OAAA,GAAAjB,EAAA,KACxB,gBAAAkB,GAAA,OAAAtB,EAAA0B,MAAA,KAAAf,UAAE,CAAF,CAFkB,GAGrB,GAAG,IAEH,IAAMuE,EAAgB,SAACD,GACO,UAAxBA,EAAQE,cACVC,EAAAA,EAAAA,IACEpB,EAAW1D,WACXsE,EAAKvE,MACLE,EACAC,EACA,SACAyE,EAAQI,YAGgB,SAAxBJ,EAAQE,cACVG,EAAAA,EAAAA,IACEV,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAIgB,eAAxBJ,EAAQE,cACVI,EAAAA,EAAAA,IACEX,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVK,EAAAA,EAAAA,IACEZ,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,gBAAxBJ,EAAQE,cACVM,EAAAA,EAAAA,IACEb,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,QAAxBJ,EAAQE,cACVO,EAAAA,EAAAA,IACEd,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,UAAxBJ,EAAQE,cACVQ,EAAAA,EAAAA,IACEf,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,WAAxBJ,EAAQE,cACVS,EAAAA,EAAAA,IACEhB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,UAAxBJ,EAAQE,cACVU,EAAAA,EAAAA,IACEjB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVW,EAAAA,EAAAA,IACElB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVY,EAAAA,EAAAA,IACEnB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVa,EAAAA,EAAAA,IACEhC,EAAW1D,WACXsE,EAAKvE,MACLE,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVc,EAAAA,EAAAA,IACErB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,gBAAxBJ,EAAQE,cACVe,EAAAA,EAAAA,IACEtB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACVgB,EAAAA,EAAAA,IACEvB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,YAAxBJ,EAAQE,cACViB,EAAAA,EAAAA,IACExB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,eAAxBJ,EAAQE,cACVkB,EAAAA,EAAAA,IACEzB,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,aAAxBJ,EAAQE,cACVmB,EAAAA,EAAAA,IACE1B,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,eAAxBJ,EAAQE,cACVoB,EAAAA,EAAAA,IACE3B,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,cAAxBJ,EAAQE,cACVqB,EAAAA,EAAAA,IACE5B,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,SAAxBJ,EAAQE,cACVsB,EAAAA,EAAAA,IACE7B,EAAKvE,MACL2D,EAAW1D,WACXC,EACAC,EACA,SACAyE,EAAQI,YAGgB,QAAxBJ,EAAQE,cACVpF,EAAAA,EAAAA,IACEiE,EAAW1D,WACXsE,EAAKvE,MACLE,EACAC,EACA,SACAyE,EAAQI,WAGd,EAEA,OAAO3B,EAAAA,EAAAA,KAAAP,EAAAA,SAAA,GACT,E,iCCrQauD,GAAkB,SAACrG,EAAOC,EAAYC,EAAUoG,GAC3DhF,MAAM,GAADC,OAAIC,EAAAA,EAAM,YAAAD,OAAW+E,GAAQ,CAChC7E,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADJ,OAAYvB,IAE3B4B,KAAMC,KAAKC,UAAU,CACnB7B,WAAAA,MAGD8B,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACC,GACc,MAAfA,EAAIE,SACO,aAAToE,GACFpG,GAASqG,EAAAA,GAAAA,IAAcvE,EAAIwE,WAEhB,aAATF,GACFpG,GAASuG,EAAAA,GAAAA,IAAczE,EAAI0E,WAEhB,WAATJ,GACFpG,GAASyG,EAAAA,GAAAA,IAAa3E,EAAI4E,UAGhC,IACCvE,OAAM,WAAO,GAClB,E,iCCyIA,GA3IkB,WAEhB,IAAMnC,GAAWoE,EAAAA,EAAAA,MAGXuC,GAAUpE,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM8B,KAAKC,IAAI,IAChDtE,GAASsC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMvC,OAAOA,MAAM,IACnDwD,GAAalB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMkB,KAAKC,UAAU,IACzDiD,GAAarE,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACzDmE,GAAQtE,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMkB,KAAKmD,KAAK,IACrDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAE1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9B7C,EAAAA,EAAAA,YAAU,WACRgD,GACF,GAAG,CAACF,EAAWX,IAEf,IAaMa,EAAU,eAAA/H,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAwE,EAAA,OAAA1E,EAAAA,EAAAA,KAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACZ0G,EAAQ,CAAD5G,EAAAE,KAAA,SAEV,GADA2G,GAAW,GAECR,EAAQ7G,MAAK,CAAAQ,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAASiH,IAAkB,OAAAnH,EAAAoH,GAAApH,EAAAqH,KAAArH,EAAAE,KAAA,eAAAF,EAAAoH,GAAGf,EAAQ,KAAD,EAAtD,GAAJtC,EAAI/D,EAAAoH,GAEHd,EAAWgB,IAAuB,GAAjBhB,EAAWgB,GAAO,CAAAtH,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,IAChCqH,EAAAA,GAAAA,IAAiBjB,EAAYvC,EAAMrE,GAAU,KAAD,GAGpD8H,EAAUzD,GAEV8C,GAAW,GAAO,QAGpBpD,EAAOU,GAAG,WAAW,WACnB8C,GAAa,EACf,IAEAxD,EAAOU,GAAG,cAAc,WACtB8C,GAAa,EACf,IAjCAtD,EAAe,CAAE8D,SAAUnB,EAAWmB,WACtClB,EAAMmB,KAAI,SAACtE,GACLA,EAAKuE,OAAStB,EAAQuB,QAAUxE,EAAKyE,SAAWxB,EAAQuB,QAC1DjE,EAAe,CACbnE,MAAO6G,EAAQ7G,MACfC,WAAY2D,EAAK3D,WACjBqI,KAAM1E,EAAK3D,YAGjB,IA0Be,yBAAAO,EAAAQ,OAAA,GAAAjB,EAAA,KAChB,kBAxBe,OAAAJ,EAAA0B,MAAA,KAAAf,UAAA,KA0BVqH,EAAgB,eAAAY,GAAA3I,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0I,IAAA,IAAAC,EAAAC,EAAA,OAAA7I,EAAAA,EAAAA,KAAAU,MAAA,SAAAoI,GAAA,cAAAA,EAAAlI,KAAAkI,EAAAjI,MAAA,cAAAiI,EAAAjI,KAAA,GACFkI,EAAAA,GAAAA,IAAc/B,EAAQuB,QAAQ,KAAD,EAAtC,GAEK,cAFbK,EAAQE,EAAAd,OAEgC,IAAbY,EAAc,CAAAE,EAAAjI,KAAA,eAAAiI,EAAAjI,KAAA,GAC1BmI,EAAAA,GAAAA,IACfhC,EAAQuB,OACRvB,EAAQiC,SACRjC,EAAQ9C,OACR8C,EAAQ9C,QACR,KAAD,EALD2E,EAAQC,EAAAd,KAAAc,EAAAjI,KAAA,uBAAAiI,EAAAjI,KAAA,IAOSqI,EAAAA,GAAAA,IAAUlC,EAAQuB,OAAQvB,EAAQiC,UAAU,KAAD,GAA5DJ,EAAQC,EAAAd,KAAA,YAGNa,EAAS1I,QAAS0I,EAASjE,KAAI,CAAAkE,EAAAjI,KAAA,SAY/B,OAXFR,GACE8I,EAAAA,GAAAA,IAAM,CACJC,KAAMpC,EAAQoC,KACdd,MAAOtB,EAAQuB,OACfU,SAAUjC,EAAQiC,SAClB/E,OAAQ8C,EAAQ9C,OAChBmF,KAAM,EACNlJ,MAAO0I,EAAS1I,MAChBoI,OAAQvB,EAAQuB,OAChBN,GAAIY,EAASjE,KAAKqD,MAEpBa,EAAAQ,OAAA,SAEK,CACLF,KAAMpC,EAAQoC,KACdd,MAAOtB,EAAQuB,OACfU,SAAUjC,EAAQiC,SAClB/E,OAAQ8C,EAAQ9C,OAChBmF,KAAM,EACNlJ,MAAO0I,EAAS1I,MAChBoI,OAAQvB,EAAQuB,OAChBN,GAAIY,EAASjE,KAAKqD,KACnB,eAAAa,EAAAQ,OAAA,SAEItC,GAAO,yBAAA8B,EAAA3H,OAAA,GAAAwH,EAAA,KACf,kBAxCqB,OAAAD,EAAAlH,MAAA,KAAAf,UAAA,KA0ChB0H,EAAY,SAACzD,GAEgB,IAA/BzD,SAAS6C,EAAWyF,QACa,IAAjCtI,SAAS6C,EAAW0F,UACa,IAAjCvI,SAAS6C,EAAW2F,YAEpBnE,EAAAA,EAAAA,IAAcZ,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3D+E,EAAAA,EAAAA,IAAiBX,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC9D4E,EAAAA,EAAAA,IAAYpB,EAAW1D,WAAYsE,EAAKvE,MAAOE,EAAUC,IACzDiF,EAAAA,EAAAA,IAAkBb,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC/DmF,EAAAA,EAAAA,IAAaf,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC1DoF,EAAAA,EAAAA,IAAahB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC1DqF,EAAAA,EAAAA,IAAYjB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IACzDgG,EAAAA,EAAAA,IAAW5B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IACxDuF,EAAAA,EAAAA,IAAcnB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3DyF,EAAAA,EAAAA,IAAcrB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3D0F,EAAAA,EAAAA,IAAkBtB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC/D2F,EAAAA,EAAAA,IAAcvB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3D8F,EAAAA,EAAAA,IAAe1B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC5D+F,EAAAA,EAAAA,IAAkB3B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAG5B,IAAjCW,SAAS6C,EAAW4F,WACtBlD,GAAgB9B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAU,YAC7DmG,GAAgB9B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAU,YAC7DmG,GAAgB9B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAU,YAG/D+E,EAAAA,EAAAA,IAAWV,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IACxDsF,EAAAA,EAAAA,IAAclB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3DkF,EAAAA,EAAAA,IAAUd,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IACvD4F,EAAAA,EAAAA,IAAcxB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC3D6F,EAAAA,EAAAA,IAAiBzB,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IAC9DiG,EAAAA,EAAAA,IAAW7B,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,IACxDT,EAAAA,EAAAA,IAAU6E,EAAKvE,MAAO2D,EAAW1D,WAAYC,EAAUC,EACzD,EAEA,OAAOkD,EAAAA,EAAAA,KAAAP,EAAAA,SAAA,GACT,E,WC6IA,GA7RkB,WAChB,IAAMP,GAAWC,EAAAA,EAAAA,MACXG,GAAOF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,UAAU,IACnD2B,GAAO9B,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM8B,KAAKC,IAAI,IAG7Cd,IAFSlB,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMvC,OAAOA,MAAM,KAEtCsC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMkB,KAAKC,UAAU,KACzDzB,GAAOK,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM8G,IAAIpH,IAAI,IAC5CqH,GAAMC,EAAAA,EAAAA,GAAUtH,EAAMuB,EAAW1D,YACvC+G,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApC2C,EAAMzC,EAAA,GAAE5E,EAAS4E,EAAA,GAUxB,OANAxC,EAAAA,EAAAA,YAAU,WACHf,EAAWI,QACdxB,EAAS,SAEb,GAAG,KAGDM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEM,EAAAA,EAAAA,KAACuG,GAAAA,EAAM,CAACC,aAVS,WAAH,OAASvH,GAAWqH,EAAQ,KAW1C9G,EAAAA,EAAAA,MAAA,OAAKI,MAAO,CAAE6G,UAAW,QAAS/G,SAAA,EAChCM,EAAAA,EAAAA,KAAC0G,EAAc,KACf1G,EAAAA,EAAAA,KAAC2E,GAAS,KAEVnF,EAAAA,EAAAA,MAAA,OAAKO,UAAU,SAAQL,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OACEO,UAAS,gBAAA7B,OACPoI,EAAS,iBAAmB,aAC3B5G,SAAA,EAEHF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEM,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVC,EAAS,IAADhB,OAAKoB,EAAKsG,MACpB,EAAElG,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,yBAAwBL,SAAA,EACxCM,EAAAA,EAAAA,KAAC2G,EAAAA,EAAI,IAAG,IAAErH,EAAKsG,WAGnB5F,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVC,EAAS,UACX,EAAEQ,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,yBAAwBL,SAAA,EACxCM,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,IAAG,IAAE1F,EAAK0E,MAAQ1E,EAAK6D,aAGxC/E,EAAAA,EAAAA,KAAA,SACgC,IAA/BvC,SAAS6C,EAAWyF,QAAgBK,EAAM,GACzCpG,EAAAA,EAAAA,KAAC6G,EAAQ,CAAC5H,UAAWA,IACnB,MAC6B,IAA/BxB,SAAS6C,EAAWyF,QACa,IAAjCtI,SAAS6C,EAAW0F,WACtBI,EAAM,GACJpG,EAAAA,EAAAA,KAAC8G,EAAU,CAAC7H,UAAWA,IACrB,MAC6B,IAA/BxB,SAAS6C,EAAWyF,QACa,IAAjCtI,SAAS6C,EAAW0F,UACa,IAAjCvI,SAAS6C,EAAW2F,WACtBG,EAAM,GACJ5G,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEM,EAAAA,EAAAA,KAAC+G,EAAW,CAAC9H,UAAWA,KACxBe,EAAAA,EAAAA,KAACgH,EAAQ,CAAC/H,UAAWA,KACrBe,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVC,EAAS,WACX,EAAEQ,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,WAAUL,SAAA,EAC1BM,EAAAA,EAAAA,KAACiH,EAAAA,EAAY,IAAG,kBAGpBjH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KACEE,QAAS,WACPjB,GAAU,GACVC,EAAS,eACX,EAAEQ,UAEFF,EAAAA,EAAAA,MAAA,UAAQO,UAAU,WAAUL,SAAA,EAC1BM,EAAAA,EAAAA,KAACkH,EAAAA,EAAiB,IAAG,wBAIzB,KAC8B,IAAjCzJ,SAAS6C,EAAW4F,UAAkBE,EAAM,GAC3CpG,EAAAA,EAAAA,KAACmH,EAAS,CAAClI,UAAWA,IACpB,SAENe,EAAAA,EAAAA,KAAA,OAAAN,UACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACG0G,EAAM,OAAoB,GACI,IAA/B3I,SAAS6C,EAAWyF,QAClB/F,EAAAA,EAAAA,KAAA,QACEE,QAAS,WACPhB,EAAS,IAADhB,OACFoB,EAAKsG,KAAI,cAAA1H,OAAaoB,EAAKsG,KAAI,KAAA1H,OAAIoB,EAAKsF,WAE9C3F,GAAU,EACZ,EACAc,UAAU,cACVH,MAAO,CACLwH,MAAO,UACPC,OAAQ,WACR3H,UAEFM,EAAAA,EAAAA,KAAA,SAAAN,SAAO,gBAEP,KAAM,KACVM,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QACEE,QAAS,WACPhB,EAAS,IAADhB,OAAKoB,EAAKsG,KAAI,WACtB3G,GAAU,EACZ,EACAc,UAAU,wBACVH,MAAO,CACLyH,OAAQ,UACRC,SAAU,QACV5H,UAEFM,EAAAA,EAAAA,KAAA,SAAAN,SAAO,4BACD,KACRM,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QACEE,QAAS,WACPhB,EAAS,IAADhB,OAAKoB,EAAKsG,KAAI,aACtB3G,GAAU,EACZ,EACAc,UAAU,wBACVH,MAAO,CACLyH,OAAQ,UACRC,SAAU,QACV5H,UAEFM,EAAAA,EAAAA,KAAA,SAAAN,SAAO,sBACD,KACRM,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QACED,UAAU,yBACVH,MAAO,CACLyH,OAAQ,UACRC,SAAU,QACV5H,UAEFF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEM,EAAAA,EAAAA,KAACuH,EAAAA,EAAK,IAAG,+BAGbvH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QACED,UAAU,yBACVH,MAAO,CACLyH,OAAQ,UACRC,SAAU,QACV5H,UAEFF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEM,EAAAA,EAAAA,KAACwH,EAAAA,EAAO,IAAG,uCAGfxH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,QACED,UAAU,yBACVH,MAAO,CACLyH,OAAQ,UACRC,SAAU,QACV5H,UAEFF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,SAAQ,IAAI+H,MAAOC,cAAc,6BAKhDlI,EAAAA,EAAAA,MAAA,OACEO,UAAS,GAAA7B,OACPoI,EAAS,wBAA0B,2BAClC5G,SAAA,CAEF,IACA0G,EAAM,GACLpG,EAAAA,EAAAA,KAAAP,EAAAA,SAAA,CAAAC,SACGX,EAAKzB,OAAS,GACbkC,EAAAA,EAAAA,MAAA,KAAGO,UAAU,6BAA4BL,SAAA,CAAC,uBACnB,IACW,IAA/BjC,SAAS6C,EAAWyF,QACnB/F,EAAAA,EAAAA,KAAA,QACED,UAAU,wBACVH,MAAO,CAAEyH,OAAQ,WACjBnH,QAAS,kBACPhB,EAAS,IAADhB,OACFoB,EAAKsG,KAAI,cAAA1H,OAAaoB,EAAKsG,KAAI,KAAA1H,OAAIoB,EAAKsF,UAC7C,EACFlF,UAEDM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,wBAGN,iDAIJF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,6BAA4BL,SAAA,CAAC,sBACpB,IACY,IAA/BjC,SAAS6C,EAAWyF,QACnB/F,EAAAA,EAAAA,KAAA,QACED,UAAU,wBACVH,MAAO,CAAEyH,OAAQ,WACjBnH,QAAS,kBACPhB,EAAS,IAADhB,OACFoB,EAAKsG,KAAI,cAAA1H,OAAaoB,EAAKsG,KAAI,KAAA1H,OAAIoB,EAAKsF,UAC7C,EACFlF,UAEDM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,wBAGN,kDAKN0G,EAAM,OACRpG,EAAAA,EAAAA,KAAAP,EAAAA,SAAA,CAAAC,SACGX,EAAKzB,OAAS,GACbkC,EAAAA,EAAAA,MAAA,KAAGO,UAAU,6BAA4BL,SAAA,CAAC,4BACdjC,SAAS2I,EAAG,OAAoB,IAAI,OAE9B,IAA/B3I,SAAS6C,EAAWyF,QACnB/F,EAAAA,EAAAA,KAAA,QACED,UAAU,wBACVH,MAAO,CAAEyH,OAAQ,WACjBnH,QAAS,kBACPhB,EAAS,IAADhB,OACFoB,EAAKsG,KAAI,cAAA1H,OAAaoB,EAAKsG,KAAI,KAAA1H,OAAIoB,EAAKsF,UAC7C,EACFlF,UAEDM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,wBAGN,iDAIJF,EAAAA,EAAAA,MAAA,KAAGO,UAAU,6BAA4BL,SAAA,CAAC,2BACfjC,SAAS2I,EAAG,OAAoB,IAAI,OAE7B,IAA/B3I,SAAS6C,EAAWyF,QACnB/F,EAAAA,EAAAA,KAAA,QACED,UAAU,wBACVH,MAAO,CAAEyH,OAAQ,WACjBnH,QAAS,kBACPhB,EAAS,IAADhB,OACFoB,EAAKsG,KAAI,cAAA1H,OAAaoB,EAAKsG,KAAI,KAAA1H,OAAIoB,EAAKsF,UAC7C,EACFlF,UAEDM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,wBAGN,kDAKN,MACJM,EAAAA,EAAAA,KAAA,OAAKD,UAAU,WAAUL,UACvBM,EAAAA,EAAAA,KAAC2H,EAAAA,GAAM,iBAOrB,C,uDCjTO,IAAMtB,EAAY,SAACtH,EAAMnC,GA2B9B,OA1BemC,EACZ6I,QAAO,SAACzB,GAAG,OAAKA,EAAI0B,YAAcpK,SAASb,EAAa,IAAK,IAC7DkL,QAAO,SAACC,EAAaC,GAKpB,OAJaD,EAAYE,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAQH,EAAQG,IAAI,KAE7DJ,EAAYK,KAAKJ,GAEZD,CACT,GAAG,IACFlD,KAAI,SAACsB,EAAKkC,GACT,IAAIR,EAAapK,SAASb,EAAa,KAEnC0L,EAAU,EAEd,GAAIT,GAAc1B,EAAI0B,WAAY,CAChC,IAAIU,EAAMpC,EAAIgC,MAAQE,EAAQ,GAAKR,EAEnCS,EACW,KAARC,GAAwB,IAAVF,GAAyB,KAARE,GAAcF,EAAQ,EAClD,SACA,CACR,CAEA,OAAOC,CACT,IAGSR,QAAO,SAACU,EAAGC,GAAC,OAAMD,IAAKC,CAAC,GAAE,GACnChL,SAASb,EAAa,KACtB,OACAa,SAASgK,KAAKiB,MAAQ,IAE1B,C","sources":["Network/SubApi.js","Pages/Admin/AdminNav.js","Pages/Finance/FinanceNav.js","Pages/Pharmacy/PharmacyNav.js","Pages/Store/StoreNav.js","Pages/Client/ClientNav.js","Utils/SockectConnect.js","Utils/SocketMessages.js","Network/ClientApi.js","Utils/FetchData.js","Pages/Dashboard/Dashboard.js","Utils/VerifySub.js"],"sourcesContent":["import swal from \"sweetalert\";\r\nimport { addSub, fetchSubs, updateSub } from \"../reducers/SubSlice\";\r\nimport { ApiUrl } from \"./Urls\";\r\n\r\nexport const FetchSubs = async (\r\n  token,\r\n  instLinker,\r\n  dispatch,\r\n  online,\r\n  from = \"fetch\",\r\n  payload = {}\r\n) => {\r\n  if (from === \"fetch\") {\r\n    FetchLiveSubs(token, instLinker, online, dispatch);\r\n  } else if (parseInt(instLinker) === parseInt(payload.instLinker)) {\r\n    dispatch(updateSub(payload));\r\n  }\r\n};\r\n\r\nexport const addLiveSub = (sub, instLinker, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/sub/add`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...sub,\r\n      instLinker,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 201) {\r\n        dispatch(updateSub(res.sub));\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const updateLiveSub = (sub, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/sub/edit`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...sub,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(updateSub(res.sub));\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const FetchLiveSubs = (token, instLinker, online, dispatch) => {\r\n  fetch(`${ApiUrl}/sub/get`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      online,\r\n      instLinker,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(fetchSubs(res.subs));\r\n      }\r\n    })\r\n    .catch(() => {});\r\n};\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { PersonGear } from \"react-bootstrap-icons\";\r\n\r\nconst AdminNav = ({ setDrawer }) => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  return (\r\n    <>\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle variant=\"transparent\" className=\"nav-link\">\r\n          <PersonGear /> Admin{\" \"}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`staffs`);\r\n              }}\r\n            >\r\n              Staffs\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`modes`);\r\n              }}\r\n            >\r\n              Payment Modes\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`service-categories`);\r\n              }}\r\n            >\r\n              Service Categories\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`services`);\r\n              }}\r\n            >\r\n              Services\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`wards`);\r\n              }}\r\n            >\r\n              Wards\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`beds`);\r\n                setDrawer(false);\r\n              }}\r\n            >\r\n              Ward Beds\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`insurance-companies`);\r\n                setDrawer(false);\r\n              }}\r\n            >\r\n              Accepted Insurance\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`edit`);\r\n                setDrawer(false);\r\n              }}\r\n            >\r\n              Edit Institution\r\n            </p>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminNav;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { CashCoin } from \"react-bootstrap-icons\";\r\n\r\nconst FinanceNav = ({ setDrawer }) => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  return (\r\n    <>\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle className=\"nav-link\" variant=\"transparent\">\r\n          <CashCoin /> Finance\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`invoices`);\r\n              }}\r\n            >\r\n              Invoices\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`payments`);\r\n              }}\r\n            >\r\n              Payments\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`insurances`);\r\n              }}\r\n            >\r\n              Insurances\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`expensecats`);\r\n              }}\r\n            >\r\n              Expense Categories\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`expenses`);\r\n              }}\r\n            >\r\n              Expenses\r\n            </p>\r\n          </Dropdown.Item>{\" \"}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FinanceNav;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { ShopWindow } from \"react-bootstrap-icons\";\r\n\r\nconst PharmacyNav = ({ setDrawer }) => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  return (\r\n    <>\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle className=\"nav-link\" variant=\"transparent\">\r\n          <ShopWindow /> Pharmacy\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`pharmacy-categories`);\r\n              }}\r\n            >\r\n              Pharmacy Categories\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`pharmacy-products`);\r\n              }}\r\n            >\r\n              Pharmacy Products\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`pharmacy-entries`);\r\n              }}\r\n            >\r\n              Pharmacy Entries\r\n            </p>\r\n          </Dropdown.Item>{\" \"}\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`pos`);\r\n              }}\r\n            >\r\n              Point Of Sale\r\n            </p>\r\n          </Dropdown.Item>{\" \"}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PharmacyNav;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { CashCoin, Shop } from \"react-bootstrap-icons\";\r\n\r\nconst StoreNav = () => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  return (\r\n    <>\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle className=\"nav-link\" variant=\"transparent\">\r\n          <Shop /> Store\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`store-categories`);\r\n              }}\r\n            >\r\n              Store Categories\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`store-items`);\r\n              }}\r\n            >\r\n              Store Items\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                navigate(`store-entries`);\r\n              }}\r\n            >\r\n              Store Entries\r\n            </p>\r\n          </Dropdown.Item>{\" \"}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StoreNav;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Book, CashCoin } from \"react-bootstrap-icons\";\r\n\r\nconst ClientNav = ({ setDrawer }) => {\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n  const Navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <p\r\n        onClick={() => {\r\n          setDrawer(false);\r\n          Navigate(`patients/patient/finance/${ActiveCred.linker}`);\r\n        }}\r\n      >\r\n        <strong className=\"nav-link text-truncate\">\r\n          <CashCoin /> Finances\r\n        </strong>\r\n      </p>\r\n      <hr />{\" \"}\r\n      <p\r\n        onClick={() => {\r\n          setDrawer(false);\r\n          Navigate(`patients/patient/health/${ActiveCred.linker}`);\r\n        }}\r\n      >\r\n        <strong className=\"nav-link text-truncate\">\r\n          <Book /> Health Records\r\n        </strong>\r\n      </p>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientNav;\r\n","import io from \"socket.io-client\";\r\nimport { ApiUrl } from \"../Network/Urls\";\r\n\r\nexport const socket = io.connect(ApiUrl);\r\n\r\nexport const SocketJoinRoom = (data) => {\r\n  socket.emit(\"joinRoom\", data);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { socket } from \"./SockectConnect\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FetchPatients, FetchStaffs } from \"../Network/CredApi\";\r\nimport { FetchModes } from \"../Network/ModeApi\";\r\nimport { FetchExpenseCats } from \"../Network/ExpenseCatApi\";\r\nimport { FetchExpenses } from \"../Network/ExpenseApi\";\r\nimport { FetchAppointments } from \"../Network/AppointmentApi\";\r\nimport { FetchBeds } from \"../Network/BedApi\";\r\nimport { FetchEntries } from \"../Network/EntryApi\";\r\nimport { FetchHealths } from \"../Network/HealthApi\";\r\nimport { FetchInsComps } from \"../Network/InsCompApi\";\r\nimport { FetchInvoices } from \"../Network/InvoiceApi\";\r\nimport { FetchPayments } from \"../Network/PaymentApi\";\r\nimport { FetchPharmacyCats } from \"../Network/PharmacyCatApi\";\r\nimport { FetchProducts } from \"../Network/ProductApi\";\r\nimport { FetchServices } from \"../Network/ServiceApi\";\r\nimport { FetchServiceCats } from \"../Network/ServiceCatApi\";\r\nimport { FetchStoreCats } from \"../Network/StoreCatApi\";\r\nimport { FetchStoreEntries } from \"../Network/StoreEntryApi\";\r\nimport { FetchItems } from \"../Network/ItemApi\";\r\nimport { FetchWards } from \"../Network/WardApi\";\r\nimport { FetchSubs } from \"../Network/SubApi\";\r\nimport { FetchVitals } from \"../Network/VitalApi\";\r\n\r\nconst SocketMessages = () => {\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const User = useSelector((state) => state.auth.user);\r\n  const online = useSelector((state) => state.online.online);\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", async (message) => {\r\n      UpdateMessage(message);\r\n    });\r\n  }, []);\r\n\r\n  const UpdateMessage = (message) => {\r\n    if (message.messageType === \"staff\") {\r\n      FetchStaffs(\r\n        ActiveCred.instLinker,\r\n        User.token,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"mode\") {\r\n      FetchModes(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n\r\n    if (message.messageType === \"expenseCat\") {\r\n      FetchExpenseCats(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"expense\") {\r\n      FetchExpenses(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"appointment\") {\r\n      FetchAppointments(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"bed\") {\r\n      FetchBeds(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"entry\") {\r\n      FetchEntries(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"health\") {\r\n      FetchHealths(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"vital\") {\r\n      FetchVitals(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"insComp\") {\r\n      FetchInsComps(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"invoice\") {\r\n      FetchInvoices(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"patient\") {\r\n      FetchPatients(\r\n        ActiveCred.instLinker,\r\n        User.token,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"payment\") {\r\n      FetchPayments(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"pharmacyCat\") {\r\n      FetchPharmacyCats(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"product\") {\r\n      FetchProducts(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"service\") {\r\n      FetchServices(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"serviceCat\") {\r\n      FetchServiceCats(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"storeCat\") {\r\n      FetchStoreCats(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"storeEntry\") {\r\n      FetchStoreEntries(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"storeItem\") {\r\n      FetchItems(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"ward\") {\r\n      FetchWards(\r\n        User.token,\r\n        ActiveCred.instLinker,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n    if (message.messageType === \"sub\") {\r\n      FetchSubs(\r\n        ActiveCred.instLinker,\r\n        User.token,\r\n        dispatch,\r\n        online,\r\n        \"socket\",\r\n        message.dataValues\r\n      );\r\n    }\r\n  };\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SocketMessages;\r\n","import { fetchPayments } from \"../reducers/PaymentSlice\";\r\nimport { fetchInvoices } from \"../reducers/InvoiceSlice\";\r\nimport { fetchHealths } from \"../reducers/HealthSlice\";\r\nimport { ApiUrl } from \"./Urls\";\r\n\r\nexport const FetchClientData = (token, instLinker, dispatch, link) => {\r\n  fetch(`${ApiUrl}/client/${link}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      instLinker,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        if (link === \"payments\") {\r\n          dispatch(fetchPayments(res.payments));\r\n        }\r\n        if (link === \"invoices\") {\r\n          dispatch(fetchInvoices(res.invoices));\r\n        }\r\n        if (link === \"health\") {\r\n          dispatch(fetchHealths(res.healths));\r\n        }\r\n      }\r\n    })\r\n    .catch(() => {});\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FetchAppointments } from \"../Network/AppointmentApi\";\r\nimport { FetchBeds } from \"../Network/BedApi\";\r\nimport { FetchClientData } from \"../Network/ClientApi\";\r\nimport { FetchStaffs } from \"../Network/CredApi\";\r\nimport { FetchEntries } from \"../Network/EntryApi\";\r\nimport { FetchExpenses } from \"../Network/ExpenseApi\";\r\nimport { FetchExpenseCats } from \"../Network/ExpenseCatApi\";\r\nimport { FetchHealths } from \"../Network/HealthApi\";\r\nimport { FetchInsComps } from \"../Network/InsCompApi\";\r\nimport { FetchInvoices } from \"../Network/InvoiceApi\";\r\nimport { FetchItems } from \"../Network/ItemApi\";\r\nimport { FetchModes } from \"../Network/ModeApi\";\r\nimport { FetchPayments } from \"../Network/PaymentApi\";\r\nimport { FetchPharmacyCats } from \"../Network/PharmacyCatApi\";\r\nimport { FetchProducts } from \"../Network/ProductApi\";\r\nimport { FetchServices } from \"../Network/ServiceApi\";\r\nimport { FetchServiceCats } from \"../Network/ServiceCatApi\";\r\nimport { FetchStoreCats } from \"../Network/StoreCatApi\";\r\nimport { FetchStoreEntries } from \"../Network/StoreEntryApi\";\r\nimport { FetchSubs } from \"../Network/SubApi\";\r\nimport { FetchWards } from \"../Network/WardApi\";\r\nimport { CheckLiveUser, LiveLogIn, RegisterUser } from \"../Network/AuthApi\";\r\nimport { login } from \"../reducers/AuthSlice\";\r\nimport { RegisterLiveInst } from \"../Network/InstApi\";\r\nimport { SocketJoinRoom, socket } from \"./SockectConnect\";\r\nimport { FetchVitals } from \"../Network/VitalApi\";\r\n\r\nconst FetchData = () => {\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  //local user\r\n  const TheUser = useSelector((state) => state.auth.user);\r\n  const online = useSelector((state) => state.online.online);\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n  const ActiveInst = useSelector((state) => state.inst.activeInst);\r\n  const creds = useSelector((state) => state.cred.creds);\r\n  const [Loading, setLoading] = useState(false);\r\n\r\n  const [Connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    UpdateData();\r\n  }, [Connected, TheUser]);\r\n\r\n  const ConnectRooms = () => {\r\n    SocketJoinRoom({ clientId: ActiveInst.clientId });\r\n    creds.map((cred) => {\r\n      if (cred.email == TheUser.logger || cred.contact == TheUser.logger) {\r\n        SocketJoinRoom({\r\n          token: TheUser.token,\r\n          instLinker: cred.instLinker,\r\n          room: cred.instLinker,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const UpdateData = async () => {\r\n    if (!Loading) {\r\n      setLoading(true);\r\n      //live user\r\n      let User = !TheUser.token ? await RegisterLiveUser() : TheUser;\r\n\r\n      if (!ActiveInst.id || ActiveInst.id == 0) {\r\n        await RegisterLiveInst(ActiveInst, User, dispatch);\r\n      }\r\n\r\n      FetchData(User);\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    socket.on(\"connect\", () => {\r\n      setConnected(true);\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      setConnected(false);\r\n    });\r\n\r\n    ConnectRooms();\r\n  };\r\n\r\n  const RegisterLiveUser = async () => {\r\n    let liveUser = await CheckLiveUser(TheUser.logger);\r\n    let UserLive;\r\n    if (liveUser === \"register\" || liveUser === 0) {\r\n      UserLive = await RegisterUser(\r\n        TheUser.logger,\r\n        TheUser.password,\r\n        TheUser.linker,\r\n        TheUser.linker\r\n      );\r\n    } else {\r\n      UserLive = await LiveLogIn(TheUser.logger, TheUser.password);\r\n    }\r\n\r\n    if (UserLive.token && UserLive.user) {\r\n      dispatch(\r\n        login({\r\n          name: TheUser.name,\r\n          email: TheUser.logger,\r\n          password: TheUser.password,\r\n          linker: TheUser.linker,\r\n          live: 1,\r\n          token: UserLive.token,\r\n          logger: TheUser.logger,\r\n          id: UserLive.user.id,\r\n        })\r\n      );\r\n\r\n      return {\r\n        name: TheUser.name,\r\n        email: TheUser.logger,\r\n        password: TheUser.password,\r\n        linker: TheUser.linker,\r\n        live: 1,\r\n        token: UserLive.token,\r\n        logger: TheUser.logger,\r\n        id: UserLive.user.id,\r\n      };\r\n    }\r\n    return TheUser;\r\n  };\r\n\r\n  const FetchData = (User) => {\r\n    if (\r\n      parseInt(ActiveCred.admin) === 1 ||\r\n      parseInt(ActiveCred.finance) === 1 ||\r\n      parseInt(ActiveCred.medical) === 1\r\n    ) {\r\n      FetchExpenses(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchExpenseCats(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchStaffs(ActiveCred.instLinker, User.token, dispatch, online);\r\n      FetchAppointments(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchEntries(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchHealths(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchVitals(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchItems(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchInvoices(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchPayments(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchPharmacyCats(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchProducts(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchStoreCats(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchStoreEntries(User.token, ActiveCred.instLinker, dispatch, online);\r\n    }\r\n\r\n    if (parseInt(ActiveCred.patient) === 1) {\r\n      FetchClientData(User.token, ActiveCred.instLinker, dispatch, \"payments\");\r\n      FetchClientData(User.token, ActiveCred.instLinker, dispatch, \"invoices\");\r\n      FetchClientData(User.token, ActiveCred.instLinker, dispatch, \"health\");\r\n    }\r\n\r\n    FetchModes(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchInsComps(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchBeds(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchServices(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchServiceCats(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchWards(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchSubs(User.token, ActiveCred.instLinker, dispatch, online);\r\n  };\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default FetchData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport AdminNav from \"../Admin/AdminNav\";\r\nimport FinanceNav from \"../Finance/FinanceNav\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Bank,\r\n  EnvelopeOpenHeart,\r\n  PersonCircle,\r\n  PersonHearts,\r\n  Globe,\r\n  Mailbox,\r\n} from \"react-bootstrap-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PharmacyNav from \"../Pharmacy/PharmacyNav\";\r\nimport StoreNav from \"../Store/StoreNav\";\r\nimport ClientNav from \"../Client/ClientNav\";\r\nimport { VerifySub } from \"../../Utils/VerifySub\";\r\nimport SocketMessages from \"../../Utils/SocketMessages\";\r\nimport FetchData from \"../../Utils/FetchData\";\r\nimport Header from \"../../components/Header\";\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  const User = useSelector((state) => state.auth.user);\r\n  const online = useSelector((state) => state.online.online);\r\n\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n  const subs = useSelector((state) => state.sub.subs);\r\n  const Sub = VerifySub(subs, ActiveCred.instLinker);\r\n  const [Drawer, setDrawer] = useState(false);\r\n\r\n  const ToggleDrawer = () => setDrawer(!Drawer);\r\n\r\n  useEffect(() => {\r\n    if (!ActiveCred.linker) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header ToggleDrawer={ToggleDrawer}></Header>\r\n      <div style={{ marginTop: \"40px\" }}>\r\n        <SocketMessages></SocketMessages>\r\n        <FetchData></FetchData>\r\n\r\n        <div className=\"d-flex\">\r\n          <div\r\n            className={`bg-secondary ${\r\n              Drawer ? \"side-menu-open\" : \"side-menu\"\r\n            }`}\r\n          >\r\n            <div>\r\n              <p\r\n                onClick={() => {\r\n                  setDrawer(false);\r\n                  navigate(`/${inst.name}`);\r\n                }}\r\n              >\r\n                <strong className=\"nav-link text-truncate\">\r\n                  <Bank /> {inst.name}\r\n                </strong>\r\n              </p>\r\n              <hr />\r\n              <p\r\n                onClick={() => {\r\n                  setDrawer(false);\r\n                  navigate(`profile`);\r\n                }}\r\n              >\r\n                <strong className=\"nav-link text-truncate\">\r\n                  <PersonCircle /> {User.name || User.logger}\r\n                </strong>\r\n              </p>\r\n              <hr />\r\n              {parseInt(ActiveCred.admin) === 1 && Sub > 0 ? (\r\n                <AdminNav setDrawer={setDrawer}></AdminNav>\r\n              ) : null}\r\n              {(parseInt(ActiveCred.admin) === 1 ||\r\n                parseInt(ActiveCred.finance) === 1) &&\r\n              Sub > 0 ? (\r\n                <FinanceNav setDrawer={setDrawer}></FinanceNav>\r\n              ) : null}\r\n              {(parseInt(ActiveCred.admin) === 1 ||\r\n                parseInt(ActiveCred.finance) === 1 ||\r\n                parseInt(ActiveCred.medical) === 1) &&\r\n              Sub > 0 ? (\r\n                <>\r\n                  <PharmacyNav setDrawer={setDrawer}></PharmacyNav>\r\n                  <StoreNav setDrawer={setDrawer}></StoreNav>\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`patients`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link\">\r\n                      <PersonHearts /> Patients\r\n                    </strong>\r\n                  </p>\r\n                  <hr />\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`appointments`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link\">\r\n                      <EnvelopeOpenHeart /> Appointments\r\n                    </strong>\r\n                  </p>\r\n                </>\r\n              ) : null}\r\n              {parseInt(ActiveCred.patient) === 1 && Sub > 0 ? (\r\n                <ClientNav setDrawer={setDrawer}></ClientNav>\r\n              ) : null}\r\n            </div>\r\n            <div>\r\n              <p>\r\n                {Sub - 30 * 24 * 60 * 60 < 0 &&\r\n                parseInt(ActiveCred.admin) === 1 ? (\r\n                  <span\r\n                    onClick={() => {\r\n                      navigate(\r\n                        `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                      );\r\n                      setDrawer(false);\r\n                    }}\r\n                    className=\"text-center\"\r\n                    style={{\r\n                      color: \"hotpink\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <small>Activate </small>\r\n                  </span>\r\n                ) : null}{\" \"}\r\n                <br />\r\n                <span\r\n                  onClick={() => {\r\n                    navigate(`/${inst.name}/terms`);\r\n                    setDrawer(false);\r\n                  }}\r\n                  className=\"text-center text-info\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                >\r\n                  <small>Terms And Conditions </small>\r\n                </span>{\" \"}\r\n                <br />\r\n                <span\r\n                  onClick={() => {\r\n                    navigate(`/${inst.name}/privacy`);\r\n                    setDrawer(false);\r\n                  }}\r\n                  className=\"text-center text-info\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                >\r\n                  <small>Privacy Policy </small>\r\n                </span>{\" \"}\r\n                <br />\r\n                <span\r\n                  className=\"text-center text-light\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                >\r\n                  <small>\r\n                    <Globe /> www.techsystems.world\r\n                  </small>\r\n                </span>\r\n                <br />\r\n                <span\r\n                  className=\"text-center text-light\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                >\r\n                  <small>\r\n                    <Mailbox /> contact.techsystems@gmail.com\r\n                  </small>\r\n                </span>\r\n                <br />\r\n                <span\r\n                  className=\"text-center text-light\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                >\r\n                  <small>&copy; {new Date().getFullYear()} Techsystems</small>\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`${\r\n              Drawer ? \"main-page-drawer-open\" : \"main-page-drawer-closed\"\r\n            }`}\r\n          >\r\n            {\" \"}\r\n            {Sub < 0 ? (\r\n              <>\r\n                {subs.length > 0 ? (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Annual Period Lapsed{\" \"}\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                ) : (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Trial Period Lapsed{\" \"}\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                )}\r\n              </>\r\n            ) : Sub < 5 * 24 * 60 * 60 ? (\r\n              <>\r\n                {subs.length > 0 ? (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Annual Period Lapsing in {parseInt(Sub / (24 * 60 * 60))}{\" \"}\r\n                    Days\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                ) : (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Trial Period Lapsing In {parseInt(Sub / (24 * 60 * 60))}{\" \"}\r\n                    Days\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                )}\r\n              </>\r\n            ) : null}\r\n            <div className=\"bg-light\">\r\n              <Outlet></Outlet>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","export const VerifySub = (subs, instLinker) => {\r\n  let subTimes = subs\r\n    .filter((sub) => sub.softwareId == parseInt(instLinker / 1000))\r\n    .reduce((accumulator, current) => {\r\n      let Exists = accumulator.some((obj) => obj.code == current.code);\r\n      if (!Exists) {\r\n        accumulator.push(current);\r\n      }\r\n      return accumulator;\r\n    }, [])\r\n    .map((sub, index) => {\r\n      let softwareId = parseInt(instLinker / 1000);\r\n\r\n      let subTime = 0;\r\n\r\n      if (softwareId == sub.softwareId) {\r\n        let amt = sub.code / (index + 2) - softwareId;\r\n\r\n        subTime =\r\n          (amt === 99 && index === 0) || (amt === 29 && index > 0)\r\n            ? 366 * 24 * 60 * 60\r\n            : 0;\r\n      }\r\n\r\n      return subTime;\r\n    });\r\n\r\n  return (\r\n    subTimes.reduce((a, b) => +a + +b, 0) +\r\n    parseInt(instLinker / 1000) +\r\n    90 * 24 * 60 * 60 -\r\n    parseInt(Date.now() / 1000)\r\n  );\r\n};\r\n"],"names":["FetchSubs","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","instLinker","dispatch","online","payload","_args","arguments","wrap","_context","prev","next","length","undefined","FetchLiveSubs","parseInt","updateSub","stop","_x","_x2","_x3","_x4","apply","fetch","concat","ApiUrl","method","headers","authorization","body","JSON","stringify","then","res","json","status","fetchSubs","subs","catch","setDrawer","navigate","useNavigate","useSelector","state","inst","activeInst","_jsxs","_Fragment","children","Dropdown","style","width","variant","className","_jsx","PersonGear","onClick","CashCoin","ShopWindow","Shop","ActiveCred","cred","activeCred","Navigate","linker","Book","socket","io","SocketJoinRoom","data","emit","useDispatch","User","auth","user","useEffect","on","message","UpdateMessage","messageType","FetchStaffs","dataValues","FetchModes","FetchExpenseCats","FetchExpenses","FetchAppointments","FetchBeds","FetchEntries","FetchHealths","FetchVitals","FetchInsComps","FetchInvoices","FetchPatients","FetchPayments","FetchPharmacyCats","FetchProducts","FetchServices","FetchServiceCats","FetchStoreCats","FetchStoreEntries","FetchItems","FetchWards","FetchClientData","link","fetchPayments","payments","fetchInvoices","invoices","fetchHealths","healths","TheUser","ActiveInst","creds","_useState","useState","_useState2","_slicedToArray","Loading","setLoading","_useState3","_useState4","Connected","setConnected","UpdateData","RegisterLiveUser","t0","sent","id","RegisterLiveInst","FetchData","clientId","map","email","logger","contact","room","_ref2","_callee2","liveUser","UserLive","_context2","CheckLiveUser","RegisterUser","password","LiveLogIn","login","name","live","abrupt","admin","finance","medical","patient","sub","Sub","VerifySub","Drawer","Header","ToggleDrawer","marginTop","SocketMessages","Bank","PersonCircle","AdminNav","FinanceNav","PharmacyNav","StoreNav","PersonHearts","EnvelopeOpenHeart","ClientNav","color","cursor","fontSize","Globe","Mailbox","Date","getFullYear","Outlet","filter","softwareId","reduce","accumulator","current","some","obj","code","push","index","subTime","amt","a","b","now"],"sourceRoot":""}